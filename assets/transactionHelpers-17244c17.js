import{B as h,aN as A,aO as v,aK as u,aL as g,aM as f}from"./index-00c57a60.js";import{d as E,b}from"./index-bdc09e66.js";function I(n,e,r){function o(c,a){var s;const i=c;return(s=a.validators)==null?void 0:s.find(t=>t.name===i)}return n.map(c=>{const a=e.find(i=>i.delegation.validator_address===c.operator_address);return{validator:c,userDelegations:a,undelagatingInfo:o(c.operator_address,r)}})}const M=n=>{let e=h.from("0");return n.forEach(r=>{r.balance.denom.includes("aalthea")&&(e=e.add(r.balance.amount))}),e};async function R(n){const e="https://althea.api.chandrastation.com/cosmos/mint/v1beta1/annual_provisions",r="https://althea.api.chandrastation.com/cosmos/staking/v1beta1/pool",o={method:"GET",headers:{Accept:"application/json"}},c=await fetch(r,o).then(s=>s.json()).then(s=>parseFloat(s.pool.bonded_tokens)).catch(()=>0);return(await fetch(e,o).then(s=>s.json()).then(s=>parseFloat(s.annual_provisions)).catch(()=>0)/c*100).toFixed(2)}async function y(n){const e="https://althea.api.chandrastation.com/cosmos/staking/v1beta1/validators",r={method:"GET",headers:{Accept:"application/json"}};let o=[],c=[];try{(await(await fetch(e,r)).json()).validators.forEach(s=>{const t={operator_address:s.operator_address,moniker:s.description.moniker,commission:s.commission.commission_rates.rate,tokens:s.tokens};s.jailed?o.push(t):c.push(t)})}catch(a){console.error("Error fetching validators:",a)}return{jailed:o,notJailed:c}}async function T(n,e){var r;try{const c="althea"+"valcons",a={method:"GET",headers:{Accept:"application/json"}},i=`https://althea.api.chandrastation.com/cosmos/staking/v1beta1/validators/${n}`,s=await fetch(i,a),{validator:t}=await s.json(),l=(r=t==null?void 0:t.consensus_pubkey)==null?void 0:r.key;if(l){const d=E.sha256(b.fromBase64(l)).slice(0,20);return b.toBech32(c,d)}return""}catch(o){return console.error("Error in getValconsAddressForValidator:",o),""}}async function V(n){const e=(await y()).notJailed,o="althea"+"valcons",c={method:"GET",headers:{Accept:"application/json"}},a=e.map(async t=>{var p;const l=`https://althea.api.chandrastation.com/cosmos/staking/v1beta1/validators/${t.operator_address}`,d=await fetch(l,c).catch(m=>console.error("Error fetching consensus key:",m));if(d!=null&&d.ok){const{validator:m}=await d.json();return(p=m==null?void 0:m.consensus_pubkey)==null?void 0:p.key}return null});return(await Promise.all(a)).filter(Boolean).map(t=>{const l=E.sha256(b.fromBase64(t)).slice(0,20);return b.toBech32(o,l)})}async function x(n){const e=await V(),r={method:"GET",headers:{Accept:"application/json"}},o=e.map(async i=>{const s=`https://althea.api.chandrastation.com/cosmos/slashing/v1beta1/signing_infos/${i}`;return(await fetch(s,r)).json()}),c=await Promise.all(o);let a={};return c.forEach((i,s)=>{const t=e[s];if(i.val_signing_info){const{tombstoned:l,missed_blocks_counter:d}=i.val_signing_info,p=parseInt(d,10);a[t]={tombstoned:l,missedBlocks:p}}else a[t]={tombstoned:null,missedBlocks:null}}),a}async function B(n){const e=(await y()).notJailed,r={method:"GET",headers:{Accept:"application/json"}},o=e.map(async a=>{const i=`https://althea.api.chandrastation.com/cosmos/distribution/v1beta1/validators/${a.operator_address}/slashes`,t=await(await fetch(i,r)).json();return{validator:a.operator_address,slashes:t.slashes&&t.slashes.length>0?t.slashes:[]}});return{slashings:await Promise.all(o)}}async function D(n){try{const{notJailed:e}=await y("https://althea.api.chandrastation.com"),r={};await Promise.all(e.map(async s=>{const t=await T(s.operator_address,"https://althea.api.chandrastation.com");r[s.operator_address]=t}));const[o,c]=await Promise.all([x("https://althea.api.chandrastation.com"),B("https://althea.api.chandrastation.com")]),a={};c.slashings.forEach(s=>{a[s.validator]=s.slashes.length});const i=e.map(s=>{const t=r[s.operator_address],l=o[t];return{moniker:s.moniker,operator_address:s.operator_address,tokens:s.tokens,commission:s.commission,valcons_address:t,missedBlocks:(l==null?void 0:l.missedBlocks)||0,tombstoned:(l==null?void 0:l.tombstoned)||!1,slashings:a[s.operator_address]||0,score:0,trueRank:0}});return i.sort((s,t)=>parseFloat(t.tokens)-parseFloat(s.tokens)).forEach((s,t)=>{s.trueRank=t+1}),i}catch(e){return console.error("Error in getValidatorsInfo:",e),[]}}async function S(n){const e=await D(),r=e.reduce((s,t)=>s+parseFloat(t.commission),0)/e.length;e.forEach(s=>{let t=0;const l=r-parseFloat(s.commission);l<0?t-=Math.abs(l):t+=l,s.missedBlocks<=100?t+=5:t-=s.missedBlocks-100,s.slashings>1?t-=(s.slashings-1)*5:s.slashings===0&&(t+=5),s.score=t});const o=[...e].sort((s,t)=>parseFloat(t.tokens)-parseFloat(s.tokens)).slice(0,10),c=new Set(o.map(s=>s.operator_address));return e.filter(s=>!c.has(s.operator_address)).sort((s,t)=>t.score-s.score).slice(0,10)}const k="application/json";async function O(n,e,r,o,c,a,i){const s=await u(n),t={validatorAddress:e,amount:r,denom:"aalthea"},l=g.createTxMsgDelegate(a,s,c,i,t);return await f(l,s,a,o,n)}async function J(n,e,r,o,c,a){const i=await u(n),s=await S(),t=e/s.length,l=s.map(d=>g.createTxMsgDelegate(c,i,o,a,{validatorAddress:d.operator_address,amount:t,denom:"aalthea"}));return console.log(l,i,c,r,n),await f(l,i,c,r,n)}async function $(n,e,r,o,c,a,i){const s=await u(n),t={validatorAddress:e,amount:r,denom:"aalthea"},l=g.createTxMsgUndelegate(a,s,c,i,t);return await f(l,s,a,o,n)}async function C(n,e,r,o,c,a,i,s){const t=await u(n),l={validatorSrcAddress:i,validatorDstAddress:s,amount:e,denom:"aalthea"},d=g.createTxMsgBeginRedelegate(c,t,o,a,l);return await f(d,t,c,r,n)}async function U(n,e,r,o,c,a){const i={validatorAddresses:Array.from(a.map(l=>l.validator.operator_address))},s=await u(n),t=g.createTxMsgMultipleWithdrawDelegatorReward(o,s,r,c,i);return await f(t,s,o,e,n)}async function K(n,e){const r=await A(e,n),o=n+v.generateEndpointGetDelegations(r);return await fetch(o,{method:"GET",headers:{Accept:k}}).then(a=>a.json()).then(a=>a.delegation_responses).catch(a=>(console.log(a),[]))}async function N(n,e){const r=await A(e,n),o=n+v.generateEndpointGetUndelegations(r);return await fetch(o,{method:"GET",headers:{Accept:k}}).then(a=>a.json()).then(a=>{let i={},s=[],t=h.from("0");return a.unbonding_responses.forEach(l=>{let d={},p=h.from("0");const{entries:m,validator_address:P}=l;d.name=P;let j=[];m.forEach(_=>{let w={};w.complete_time_stamp=_.completion_time,w.value_of_coin=h.from(_.balance),j.push(w),p=p.add(h.from(_.balance)),t=t.add(h.from(_.balance))}),d.lockouts=j,d.validator_unbonding=p,s.push(d)}),i.total_unbonding=t,i.validators=s,i}).catch(a=>(console.log(a),{total_unbonding:h.from("0")}))}async function L(n){const e=n+"/cosmos/staking/v1beta1/validators?pagination.limit=300";return await fetch(e,{method:"GET",headers:{Accept:k}}).then(o=>o.json()).then(o=>o.validators).catch(o=>(console.log(o),[]))}async function H(n,e){const r=await A(e,n),o=n+v.generateEndpointDistributionRewardsByAddress(r);return await fetch(o,{method:"GET",headers:{Accept:k}}).then(a=>a.json()).then(a=>{let i=h.from("0");return a.total.forEach(s=>{s.denom.includes("aalthea")&&(i=h.from(s.amount.split(".")[0]))}),i}).catch(a=>(console.log(a),h.from("0")))}export{O as a,$ as b,J as c,C as d,I as e,K as f,S as g,H as h,N as i,L as j,R as k,M as l,U as t};
