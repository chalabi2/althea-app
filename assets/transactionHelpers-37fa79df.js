import{B as h,aN as k,aO as b,aK as m,aL as u,aM as g}from"./index-3ac55dbb.js";import{d as E,b as _}from"./index-6b18e78d.js";function $(i,a,n){function e(r,o){var s;const c=r;return(s=o.validators)==null?void 0:s.find(t=>t.name===c)}return i.map(r=>{const o=a.find(c=>c.delegation.validator_address===r.operator_address);return{validator:r,userDelegations:o,undelagatingInfo:e(r.operator_address,n)}})}const G=i=>{let a=h.from("0");return i.forEach(n=>{n.balance.denom.includes("aalthea")&&(a=a.add(n.balance.amount))}),a};async function M(i){const a="https://althea.api.chandrastation.com/cosmos/mint/v1beta1/annual_provisions",n="https://althea.api.chandrastation.com/cosmos/staking/v1beta1/pool",e={method:"GET",headers:{Accept:"application/json"}},r=await fetch(n,e).then(s=>s.json()).then(s=>parseFloat(s.pool.bonded_tokens)).catch(()=>0);return(await fetch(a,e).then(s=>s.json()).then(s=>parseFloat(s.annual_provisions)).catch(()=>0)/r*100).toFixed(2)}async function y(i){const a="https://althea.api.chandrastation.com/cosmos/staking/v1beta1/validators",n={method:"GET",headers:{Accept:"application/json"}};let e=[],r=[];try{(await(await fetch(a,n)).json()).validators.forEach(s=>{const t={operator_address:s.operator_address,moniker:s.description.moniker,commission:s.commission.commission_rates.rate,tokens:s.tokens};s.jailed?e.push(t):r.push(t)})}catch(o){console.error("Error fetching validators:",o)}return{jailed:e,notJailed:r}}async function P(i,a){var n;try{const r="althea"+"valcons",o={method:"GET",headers:{Accept:"application/json"}},c=`https://althea.api.chandrastation.com/cosmos/staking/v1beta1/validators/${i}`,s=await fetch(c,o),{validator:t}=await s.json(),l=(n=t==null?void 0:t.consensus_pubkey)==null?void 0:n.key;if(l){const d=E.sha256(_.fromBase64(l)).slice(0,20);return _.toBech32(r,d)}return""}catch(e){return console.error("Error in getValconsAddressForValidator:",e),""}}const V=async(i,a,n=3)=>{for(let e=0;e<n;e++)try{const r=await fetch(i,a);if(r.ok)return await r.json();throw new Error("Failed response")}catch(r){if(console.error(`Attempt ${e+1} failed for URL: ${i}. Error: ${r}`),e>=n-1)throw r}};async function x(i){try{const a=(await y("https://althea.api.chandrastation.com")).notJailed,n="altheavalcons",e={method:"GET",headers:{Accept:"application/json"}},r=a.map(async s=>{var d,p;const t=`https://althea.api.chandrastation.com/cosmos/staking/v1beta1/validators/${s.operator_address}`,l=await V(t,e);return(p=(d=l==null?void 0:l.validator)==null?void 0:d.consensus_pubkey)==null?void 0:p.key});return(await Promise.all(r)).filter(Boolean).map(s=>{const t=E.sha256(_.fromBase64(s)).slice(0,20);return _.toBech32(n,t)})}catch(a){return console.error("Error in getValconsAddresses:",a),[]}}async function B(i){try{const a=await x("https://althea.api.chandrastation.com"),n={method:"GET",headers:{Accept:"application/json"}},e=a.map(async c=>{try{const s=`https://althea.api.chandrastation.com/cosmos/slashing/v1beta1/signing_infos/${c}`,t=await fetch(s,n);return t.ok?await t.json():(console.error(`Error fetching signing info for address: ${c}. Status: ${t.status}`),null)}catch(s){return console.error(`Error fetching signing info for address: ${c}. Error: ${s.message}`),null}}),r=await Promise.all(e);let o={};return r.forEach((c,s)=>{if(c&&c.val_signing_info){const t=a[s],{tombstoned:l,missed_blocks_counter:d}=c.val_signing_info,p=parseInt(d,10);o[t]={tombstoned:l,missedBlocks:p}}}),o}catch(a){return console.error("Error in getSigningInfo:",a.message),{}}}async function S(i){const a=(await y()).notJailed,n={method:"GET",headers:{Accept:"application/json"}},e=a.map(async o=>{const c=`https://althea.api.chandrastation.com/cosmos/distribution/v1beta1/validators/${o.operator_address}/slashes`,t=await(await fetch(c,n)).json();return{validator:o.operator_address,slashes:t.slashes&&t.slashes.length>0?t.slashes:[]}});return{slashings:await Promise.all(e)}}async function D(i){try{const{notJailed:a}=await y("https://althea.api.chandrastation.com"),n={};await Promise.all(a.map(async s=>{const t=await P(s.operator_address,"https://althea.api.chandrastation.com");n[s.operator_address]=t}));const[e,r]=await Promise.all([B("https://althea.api.chandrastation.com"),S("https://althea.api.chandrastation.com")]),o={};r.slashings.forEach(s=>{o[s.validator]=s.slashes.length});const c=a.map(s=>{const t=n[s.operator_address],l=e[t];return{moniker:s.moniker,operator_address:s.operator_address,tokens:s.tokens,commission:s.commission,valcons_address:t,missedBlocks:(l==null?void 0:l.missedBlocks)||0,tombstoned:(l==null?void 0:l.tombstoned)||!1,slashings:o[s.operator_address]||0,score:0,trueRank:0}});return c.sort((s,t)=>parseFloat(t.tokens)-parseFloat(s.tokens)).forEach((s,t)=>{s.trueRank=t+1}),c}catch(a){return console.error("Error in getValidatorsInfo:",a),[]}}async function F(i){const a=await D(),n=a.reduce((s,t)=>s+parseFloat(t.commission),0)/a.length;a.forEach(s=>{let t=0;const l=n-parseFloat(s.commission);l<0?t-=Math.abs(l):t+=l,s.missedBlocks<=100?t+=5:t-=s.missedBlocks-100,s.slashings>1?t-=(s.slashings-1)*5:s.slashings===0&&(t+=5),s.score=t});const e=[...a].sort((s,t)=>parseFloat(t.tokens)-parseFloat(s.tokens)).slice(0,10),r=new Set(e.map(s=>s.operator_address));return a.filter(s=>!r.has(s.operator_address)).sort((s,t)=>t.score-s.score).slice(0,10)}const w="application/json";async function O(i,a,n,e,r,o,c){const s=await m(i),t={validatorAddress:a,amount:n,denom:"aalthea"},l=u.createTxMsgDelegate(o,s,r,c,t);return await g(l,s,o,e,i)}async function J(i,a,n,e,r,o){const c=await m(i),s=await F(),t=a/s.length,l=s.map(d=>u.createTxMsgDelegate(r,c,e,o,{validatorAddress:d.operator_address,amount:t,denom:"aalthea"}));return console.log(l,c,r,n,i),await g(l,c,r,n,i)}async function U(i,a,n,e,r,o,c){const s=await m(i),t={validatorAddress:a,amount:n,denom:"aalthea"},l=u.createTxMsgUndelegate(o,s,r,c,t);return await g(l,s,o,e,i)}async function C(i,a,n,e,r,o,c,s){const t=await m(i),l={validatorSrcAddress:c,validatorDstAddress:s,amount:a,denom:"aalthea"},d=u.createTxMsgBeginRedelegate(r,t,e,o,l);return await g(d,t,r,n,i)}async function K(i,a,n,e,r,o){const c={validatorAddresses:Array.from(o.map(l=>l.validator.operator_address))},s=await m(i),t=u.createTxMsgMultipleWithdrawDelegatorReward(e,s,n,r,c);return await g(t,s,e,a,i)}async function N(i,a){const n=await k(a,i),e=i+b.generateEndpointGetDelegations(n);return await fetch(e,{method:"GET",headers:{Accept:w}}).then(o=>o.json()).then(o=>o.delegation_responses).catch(o=>(console.log(o),[]))}async function L(i,a){const n=await k(a,i),e=i+b.generateEndpointGetUndelegations(n);return await fetch(e,{method:"GET",headers:{Accept:w}}).then(o=>o.json()).then(o=>{let c={},s=[],t=h.from("0");return o.unbonding_responses.forEach(l=>{let d={},p=h.from("0");const{entries:j,validator_address:T}=l;d.name=T;let v=[];j.forEach(f=>{let A={};A.complete_time_stamp=f.completion_time,A.value_of_coin=h.from(f.balance),v.push(A),p=p.add(h.from(f.balance)),t=t.add(h.from(f.balance))}),d.lockouts=v,d.validator_unbonding=p,s.push(d)}),c.total_unbonding=t,c.validators=s,c}).catch(o=>(console.log(o),{total_unbonding:h.from("0")}))}async function W(i){const a=i+"/cosmos/staking/v1beta1/validators?pagination.limit=300";return await fetch(a,{method:"GET",headers:{Accept:w}}).then(e=>e.json()).then(e=>e.validators).catch(e=>(console.log(e),[]))}async function H(i,a){const n=await k(a,i),e=i+b.generateEndpointDistributionRewardsByAddress(n);return await fetch(e,{method:"GET",headers:{Accept:w}}).then(o=>o.json()).then(o=>{let c=h.from("0");return o.total.forEach(s=>{s.denom.includes("aalthea")&&(c=h.from(s.amount.split(".")[0]))}),c}).catch(o=>(console.log(o),h.from("0")))}export{O as a,U as b,J as c,C as d,$ as e,N as f,F as g,H as h,L as i,W as j,M as k,G as l,K as t};
